#version 460

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) readonly uniform GPUSceneBuffer{ 
    mat4 worldFromCamera;
    mat4 cameraFromClip;
    mat4 clipFromWorld;
    vec4 lightDir;
} gpuSceneData;


layout(rgba16f,set = 1, binding = 0) uniform readonly image2D positionImage;
layout(rgba16f,set = 1, binding = 1) uniform readonly image2D normalImage;
layout(rgba16f,set = 1, binding = 2) uniform readonly image2D albedoImage;

layout(rgba16f,set = 2, binding = 0) uniform image2D outputImage;

struct PointLight {
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};

layout(set = 3, binding = 0) buffer readonly LightLengthBuffer{
    uint pointLightBufferLength;
};


layout(set = 3, binding = 1) buffer readonly PointLightBuffer{
    PointLight pointLights[];
};

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(positionImage);

    vec4 position = imageLoad(positionImage, texelCoord);
    vec3 normal = normalize(imageLoad(normalImage, texelCoord).xyz);
    vec4 albedo = imageLoad(albedoImage, texelCoord);

    if(texelCoord.x < size.x && texelCoord.y < size.y && position.w > 0.0)
    {
        vec3 diffuse = albedo.rgb * 0.1;
        // vec3 diffuse = vec3(0.0);
        for (int i = 0; i < pointLightBufferLength; i++)
        {
            PointLight light = pointLights[i];
            vec3 lightDir = normalize(light.position - position.xyz);
            float dist = length(light.position - position.xyz);
            if (dist > light.radius)
            {
                continue;
            }
            float diff = max(dot(lightDir, normal), 0.0);
            diffuse += diff * albedo.rgb * light.color * light.intensity;
            // diffuse = vec3(1.0, 0.0, 0.0); 
        }
        // TODO: Attneuate rthe light correctly, use the formula in rtr book
        // float diff = max(dot(gpuSceneData.lightDir.xyz, normal.xyz), 0.0);
        // diffuse += diff * albedo.rgb;
        imageStore(outputImage, texelCoord, vec4(diffuse, 1.0));
    }
    
}

