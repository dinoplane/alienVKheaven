#version 460

#extension GL_EXT_nonuniform_qualifier : enable

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) readonly uniform GPUSceneBuffer{ 
    mat4 worldFromCamera;
    mat4 cameraFromClip;
    mat4 clipFromWorld;
    vec4 lightDir;
    vec4 eyePos;
} gpuSceneData;


layout(rgba16f,set = 1, binding = 0) uniform readonly image2D positionImage;
layout(rgba16f,set = 1, binding = 1) uniform readonly image2D normalImage;
layout(rgba16f,set = 1, binding = 2) uniform readonly image2D albedoImage;

layout(rgba16f,set = 2, binding = 0) uniform image2D outputImage;

struct PointLight {
    vec3 position;
    float radius;
    vec3 color;
    float intensity;
};


layout(set = 3, binding = 0) buffer readonly LightLengthBuffer{
    uint pointLightBufferLength;
};

layout(set = 3, binding = 1) buffer readonly PointLightBuffer{
    PointLight pointLights[];
};


layout(set = 4, binding = 0) uniform sampler2DArray shadowMaps[];

layout (set = 5, binding = 0 ) readonly buffer lightSpaceMatricesBuffer {
    mat4 lightProjectionMatrix;
    mat4 lightSpaceMatrices[];
} lightSpaceMatricesData;



const vec3 shadowColors[6] = {
    vec3(1.0, 0.0, 0.0), // red
    vec3(0.0, 1.0, 0.0), // green
    vec3(0.0, 0.0, 1.0), // blue
    vec3(0.0, 1.0, 1.0), // cyan
    vec3(1.0, 0.0, 1.0), // magenta
    vec3(1.0, 1.0, 0.0)  // yellow
};

struct ShadowMapData {
    uint shadowMapIdx;
    vec2 shadowMapUV;
};

ShadowMapData selectShadowMapIdx(vec3 lightToFrag)
{
    ShadowMapData ret;

    vec3 absLightDir = abs(lightToFrag);


    if (absLightDir.x > absLightDir.y && absLightDir.x > absLightDir.z)
    {
        if (lightToFrag.x > 0.0)
        {
            ret.shadowMapIdx = 0;
            ret.shadowMapUV = vec2(lightToFrag.z, -lightToFrag.y) / absLightDir.x;
        }
        else
        {
            ret.shadowMapIdx = 2;
            ret.shadowMapUV = vec2(-lightToFrag.z, -lightToFrag.y) / absLightDir.x;
        }
    }
    else if (absLightDir.y > absLightDir.x && absLightDir.y > absLightDir.z)
    {
        if (lightToFrag.y > 0.0)
        {
            ret.shadowMapIdx = 4;
            ret.shadowMapUV = vec2(lightToFrag.x, -lightToFrag.z) / absLightDir.y;
        }
        else
        {
            ret.shadowMapIdx = 5;
            ret.shadowMapUV = vec2(lightToFrag.x, lightToFrag.z) / absLightDir.y;
        }
    }
    else    
    {
        if (lightToFrag.z > 0.0)
        {
            ret.shadowMapIdx = 1;   
            ret.shadowMapUV = vec2(-lightToFrag.x, -lightToFrag.y) / absLightDir.z;
        }
        else
        {
            ret.shadowMapIdx = 3;
            ret.shadowMapUV = vec2(lightToFrag.x, -lightToFrag.y) / absLightDir.z;
        }
    }
    

    return ret;
}

float CalculateShadowFactor(vec3 lightToFrag, float dist, vec4 fragPos, uint pointLightIdx)
{
    ShadowMapData selectedShadowMap = selectShadowMapIdx(lightToFrag);
    uint shadowMapIdx = selectedShadowMap.shadowMapIdx;

    mat4 lightSpaceView = lightSpaceMatricesData.lightSpaceMatrices[shadowMapIdx];
    
    mat4 translate = mat4(1.0);
    translate[3][0] = -pointLights[pointLightIdx].position.x;
    translate[3][1] = -pointLights[pointLightIdx].position.y;
    translate[3][2] = -pointLights[pointLightIdx].position.z;

    mat4 lightSpaceProjection = lightSpaceMatricesData.lightProjectionMatrix;
    
    vec4 lightSpacePos =  lightSpaceView * translate * vec4(fragPos.xyz, 1.0);
    float bias = 0.15;
    lightSpacePos.z += bias;
    lightSpacePos = lightSpaceProjection * lightSpacePos;
    lightSpacePos /= lightSpacePos.w;
    // lightSpacePos = lightSpacePos * 0.5 + 0.5; // convert from clip space to UV space


    ivec2 shadowMapUV = ivec2((selectedShadowMap.shadowMapUV * 0.5 + 0.5) * 4096.0);

    float closestDepth = texelFetch(shadowMaps[pointLightIdx], ivec3(shadowMapUV, shadowMapIdx), 0).x;
    float currentDepth = lightSpacePos.z;

    float shadow = currentDepth > closestDepth ? 1.0 : 0.0;
    return shadow;
}


void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(positionImage);

    vec4 position = imageLoad(positionImage, texelCoord);
    vec3 normal = normalize(imageLoad(normalImage, texelCoord).xyz);
    vec4 albedo = imageLoad(albedoImage, texelCoord);
    vec3 viewVec = normalize(gpuSceneData.eyePos.xyz - position.xyz);
    

    if(texelCoord.x < size.x && texelCoord.y < size.y && position.w > 0.0)
    {
        vec3 unlit = albedo.rgb * 0.1;

        vec3 outColor = unlit;
        for (int pointLightIdx = 0; pointLightIdx < pointLightBufferLength; pointLightIdx++)
        {
            PointLight light = pointLights[pointLightIdx];
            vec3 distVec = light.position - position.xyz;
            float dist = sqrt(dot(distVec, distVec));
            vec3 lightDir = distVec / dist;

            if (dist > light.radius)
            {
                continue;
            }

            
            float NdL = max(dot(normal, lightDir), 0.0);
            if (NdL == 0.0)
            {
                continue;
            }


            float shadowFactor = CalculateShadowFactor(-lightDir, dist, position, pointLightIdx);
            if (shadowFactor < 0.5)
            {
                // ShadowMapData selectedShadowMap = selectShadowMapIdx(-lightDir);
                // uint shadowMapIdx = selectedShadowMap.shadowMapIdx;
                // vec3 lightColor = shadowColors[shadowMapIdx];
                // outColor = lightColor;

                continue;
            }

            float c_light = light.radius*light.radius / (dist*dist + 0.001);
            float f_window = pow(max(1 - pow((dist/light.radius), 4), 0.0), 2.0);

            // float depth = texture()


            outColor +=  NdL * albedo.rgb * light.intensity * f_window * c_light * light.color;


        }
        // TODO: Attneuate rthe light correctly, use the formula in rtr book
        // float diff = max(dot(gpuSceneData.lightDir.xyz, normal.xyz), 0.0);
        // outColor += diff * albedo.rgb;
        imageStore(outputImage, texelCoord, vec4(outColor, 1.0));
    }
    
}

